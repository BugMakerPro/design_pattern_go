package main
/*
饿汉模式适用场景：
如果初始化耗时长，那我们最好不要等到真正要用它的时候，
才去执行这个耗时长的初始化过程，这会影响到系统的性能
（比如，在响应客户端接口请求的时候，做这个初始化操作，
会导致此请求的响应时间变长，甚至超时）。
采用饿汉式实现方式，将耗时的初始化操作，
提前到程序启动的时候完成，这样就能避免在程序运行的时候，
再去初始化导致的性能问题。
如果实例占用资源多，按照fail-fast的设计原则（有问题及早暴露），
那我们也希望在程序启动时就将这个实例初始化好。
如果资源不够，就会在程序启动的时候触发报错（比如Java中的 PermGen Space OOM），
我们可以立即去修复。这样也能避免在程序运行一段时间后，
突然因为初始化这个实例占用资源过多，导致系统崩溃，影响系统的可用性。
 */

var es = &EagerSingleton{}

//func init() {
//	如果EagerSingleton有属性需要初始化,可以在init内进行
//}

func GetEsInstance() *EagerSingleton  {
	return es
}

type EagerSingleton struct {
	
}
